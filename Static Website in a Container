# Static Website in a Container

## Objective

The objective of this project was to build and run a simple static HTML/CSS website inside a Docker container using the Nginx web server. This project serves as an introductory exercise in containerization, demonstrating how to use Docker to package a web application and serve it via Nginx. The main goal was to understand the basics of Dockerfiles, container networking, image creation, and port mapping‚Äîlaying a strong foundation for future container-based projects.

## Skills Learned

- Docker Installation & Environment Setuo (Windows)
- Writing & Building DockerFiles
- Containerizing Static Websites
- Exposing & Mapping Container Ports
- Using Nginx as a lightweight web server
- Running & Managing Docker containers
- Image building & Cleanup

### Tools Used
- Docker Desktop (Windows): <br>
Installed and configured to run Linux-based containers on Windows.
- Docker CLI: <br>
Used to build the Docker image, run the container, and manage Docker resources.
- Nginx: <br>
A lightweight web server used to serve the static content from within the container.
- HTML/CSS: <br>
Basic static files (index.html) to demonstrate web content delivery via container.
- Ports: <br>
The container port 80 was mapped to host port 8080 to make the site accessible via http://localhost:8080.
- Volumes (optional): <br>
Local directories can be mounted to allow real-time editing of static content without rebuilding the image.

## Steps

üñ•Ô∏è Ref 1: Static Website Creation
![image]

The project began by creating a simple static website using HTML. This website would later be served inside an Nginx container. The file structure was kept minimal to focus on Docker and Nginx deployment.
